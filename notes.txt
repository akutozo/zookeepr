11.2.5

res.json explanation

When a client communicates with a server to transfer data, either from client to server (POST) 
or from server to client (GET), that communication happens over HTTP. Unfortunately, HTTP doesn't 
really understand the type of data we send. It just sees raw data that it needs to transfer.

This means when we ask for JSON data using a GET request, our server code uses res.json() to provide 
context to the client receiving the data, so it knows what type of data to interpret the response as.

REWIND

Think back to when we used the response.json() method in the response of a fetch() request. We needed
to parse (or convert) the response data to JSON format before we could interface with it.

___________________________________________________________________________________________________________

app.use() method explanation

This is a method executed by our Express.js server that mounts a function to the server that our requests 
will pass through before getting to the intended endpoint. The functions we can mount to our server are 
referred to as middleware.

DEEP DIVE: https://expressjs.com/en/4x/api.html#app.use

Middleware functions allow us to keep our route endpoint callback functions more readable while letting 
us reuse functionality across routes to keep our code DRY.

___________________________________________________________________________________________________________

The express.urlencoded({extended: true}) method

is a method built into Express.js. It takes incoming POST data and converts it to key/value pairings that 
can be accessed in the req.body object.

The extended: true option set inside the method call informs our server that there may be sub-array data 
nested in it as well, so it needs to look as deep into the POST data as possible to parse all of the data 
correctly.

___________________________________________________________________________________________________________

The express.json() method 

takes incoming POST data in the form of JSON and parses it into the req.body JavaScript object. This 
function needs to be set up every time you create a server that's looking to accept POST data.

___________________________________________________________________________________________________________
___________________________________________________________________________________________________________
___________________________________________________________________________________________________________

11.2.6 - Add Function to Handle Animal Creation

Node path - https://nodejs.org/docs/latest-v12.x/api/path.html

This is another module built into the Node.js API that provides utilities for working with file and 
directory paths. It ultimately makes working with our file system a little more predictable, especially 
when we work with production environments such as Heroku.

To write to our animals.json file in the data subdirectory, we use the method path.join() to join the 
value of __dirname, which represents the directory of the file we execute the code in, with the 
path to the animals.json file.
___________________________________________________________________________________________________________

fs.writeFileSync() method

is the synchronous version of fs.writeFile() and doesn't require a callback function. If we were writing 
to a much larger data set, the asynchronous version would be better. 
___________________________________________________________________________________________________________

JSON.stringify

example: JSON.stringify({ animals: animalsArray }, null, 2)

To save the JavaScript array data as JSON we use JSON.stringify() to convert it. The other two arguments
used in the method, null and 2, are means of keeping the data formatted. The null argument means we don't 
want to edit any of our existing data; if we did, we could pass something in there. The 2 indicates we want
to create white space between our values to make it more readable.

___________________________________________________________________________________________________________

Data Validation

Verify each item that you're pushing is validated to match the existing data to prevent errors.

Example:

function validateAnimal(animal) {
  if (!animal.name || typeof animal.name !== 'string') {
    return false;
  }.....

if (!validateAnimal(req.body)) {
    res.status(400).send('The animal is not properly formatted.');
  } else {
    const animal = createNewAnimal(req.body, animals);
    res.json(animal);
  }

___________________________________________________________________________________________________________

Misc

req.body is where we can access and use the data sent from a client to a server.

Q Can you use the same endpoint (i.e., /api/animals) for both GET and POST requests?
A   When a request comes to our servers, we first resolve with URL endpoint the request is made to. After 
    that, it then checks to see the type of request and routes it to the proper method's callback function.

Q What would be in the req.body content of a POST request if you forget to set up the proper middleware?
A   The req.body content would be empty. You need to use the proper middleware to instruct our server
    how to parse incoming data.

RECAP for 11.2

    * Used the Express.js app.post() method to create POST routes that accept incoming data from a 
      client request.
    * Implemented middleware functionality provided by Express.js to turn our incoming POST data 
      into JSON data.
    * Used Insomnia Core to test our POST requests while we wait for the zoo's front-end designer 
      to give us client-side code.

___________________________________________________________________________________________________________
___________________________________________________________________________________________________________
___________________________________________________________________________________________________________

11.3
___________________________________________________________________________________________________________

Rooting the server (or redirecting the user) with: app.get('/', (req, res)

This allows you to direct users to the root of your server. When you carry index file in sub directory,
you want to make sure the users is automatically directed to the front or your website.

Place above .post and .listen

Example of use:

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, './public/index.html'));
});

Important: Remember that the order of your routes matter. It's important that additional routes are added
before the * route.
___________________________________________________________________________________________________________

app.use(express.static('public')); - express.static() method explained

The way it works is that we provide a file path to a location in our application and instruct the server 
to make these files static resources. This means that all of our front-end (css, js) code can now be 
accessed without having a specific server endpoint created.

Deep Dive: https://expressjs.com/en/4x/api.html#express.static
___________________________________________________________________________________________________________

Use Fetch API to POST Data

By default, the browser's fetch() functionality performs GET requests. The Fetch API also supports POST 
requests.

First and most importantly, you have to actually specify what type of request it is and set the 
method to POST. This will allow the request to make it to the proper endpoint in your server.

Next, tell the request what type of data to send and then actually provide the data. In the example below, 
the headers property is set to inform the request that this is going to be JSON data. That way, it will
add the stringified JSON data for the animalObject to the body property of the request. If these are 
missing, req.body would never recieve the data.

Example:

fetch('/api/animals', {
  method: 'POST',
  headers: {
    Accept: 'application/json',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(animalObject)
})

Deep Dive: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
___________________________________________________________________________________________________________

fetch() note

Remember, when using fetch() you have to check to see if the ok property in the response is true or false. 

Example:

fetch(queryUrl)
  .then(response => {
    if (!response.ok) {
      return alert('Error: ' + response.statusText);
    }
    return response.json();
  })
  .then(animalData => {
    console.log(animalData);
    printResults(animalData);
  });
___________________________________________________________________________________________________________

Router

Router, allows you to declare routes in any file as long as you use the proper middleware.

Example:

const router = require('express').Router();

Deep Dive: https://expressjs.com/en/guide/routing.html#express-router
___________________________________________________________________________________________________________


11.2.5

res.json explanation

When a client communicates with a server to transfer data, either from client to server (POST) 
or from server to client (GET), that communication happens over HTTP. Unfortunately, HTTP doesn't 
really understand the type of data we send. It just sees raw data that it needs to transfer.

This means when we ask for JSON data using a GET request, our server code uses res.json() to provide 
context to the client receiving the data, so it knows what type of data to interpret the response as.

REWIND

Think back to when we used the response.json() method in the response of a fetch() request. We needed
to parse (or convert) the response data to JSON format before we could interface with it.

___________________________________________________________________________________________________________

app.use() method explanation

This is a method executed by our Express.js server that mounts a function to the server that our requests 
will pass through before getting to the intended endpoint. The functions we can mount to our server are 
referred to as middleware.

DEEP DIVE: https://expressjs.com/en/4x/api.html#app.use

Middleware functions allow us to keep our route endpoint callback functions more readable while letting 
us reuse functionality across routes to keep our code DRY.

___________________________________________________________________________________________________________

The express.urlencoded({extended: true}) method

is a method built into Express.js. It takes incoming POST data and converts it to key/value pairings that 
can be accessed in the req.body object. The extended: true option set inside the method call informs our 
server that there may be sub-array data nested in it as well, so it needs to look as deep into the POST 
data as possible to parse all of the data correctly.

___________________________________________________________________________________________________________

The express.json() method 

takes incoming POST data in the form of JSON and parses it into the req.body JavaScript object. Both of the 
above middleware functions need to be set up every time you create a server that's looking to accept 
POST data.

___________________________________________________________________________________________________________
___________________________________________________________________________________________________________
___________________________________________________________________________________________________________

11.2.6 - Add Function to Handle Animal Creation

Node path - https://nodejs.org/docs/latest-v12.x/api/path.html

This is another module built into the Node.js API that provides utilities for working with file and 
directory paths. It ultimately makes working with our file system a little more predictable, especially 
when we work with production environments such as Heroku.

To write to our animals.json file in the data subdirectory, we use the method path.join() to join the 
value of __dirname, which represents the directory of the file we execute the code in, with the 
path to the animals.json file.
___________________________________________________________________________________________________________

fs.writeFileSync() method

is the synchronous version of fs.writeFile() and doesn't require a callback function. If we were writing 
to a much larger data set, the asynchronous version would be better. 
___________________________________________________________________________________________________________

JSON.stringify

example: JSON.stringify({ animals: animalsArray }, null, 2)

To save the JavaScript array data as JSON we use JSON.stringify() to convert it. The other two arguments
used in the method, null and 2, are means of keeping the data formatted. The null argument means we don't 
want to edit any of our existing data; if we did, we could pass something in there. The 2 indicates we want
to create white space between our values to make it more readable.

___________________________________________________________________________________________________________

Data Validation

Verify each item that you're pushing is validated to match the existing data to prevent errors.

Example:

function validateAnimal(animal) {
  if (!animal.name || typeof animal.name !== 'string') {
    return false;
  }.....

if (!validateAnimal(req.body)) {
    res.status(400).send('The animal is not properly formatted.');
  } else {
    const animal = createNewAnimal(req.body, animals);
    res.json(animal);
  }

___________________________________________________________________________________________________________


